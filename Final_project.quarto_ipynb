{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"MALARIA PROJECT\"  \n",
        "format: dashboard   \n",
        "author: \"Okello Daniel\"\n",
        "---"
      ],
      "id": "939987a4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Imports\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import country_converter as coco\n",
        "import plotly.express as px\n",
        "import itables"
      ],
      "id": "c6ac9f69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Load Under five Population and select 5 year period\n",
        "\n",
        "Under5_pop = pd.read_csv(\"data/u5pop.csv\")\n",
        "Under5_pop = Under5_pop[[\"country\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"]]\n",
        "\n",
        "# Melt to data to Long\n",
        "\n",
        "Under5_pop_long = Under5_pop.melt(\n",
        "    id_vars=[\"country\"], var_name=\"year\", value_name=\"Total_Pop\"\n",
        ")\n",
        "\n",
        "# Convert country names to ISO3 codes\n",
        "\n",
        "Under5_pop_long[\"country_code\"] = coco.convert(Under5_pop_long[\"country\"], to=\"ISO3\")\n",
        "\n",
        "# Load the data on Malaria cases reported\n",
        "\n",
        "Malaria_cases = pd.read_csv(\"data\\malaria_number_of_cases_reported.csv\")\n",
        "\n",
        "Malaria_cases = Malaria_cases[[\"country\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"]]\n",
        "\n",
        "# Melt to data to Long\n",
        "\n",
        "Malaria_cases_long = Malaria_cases.melt(\n",
        "    id_vars=[\"country\"], var_name=\"year\", value_name=\"Reported_cases\"\n",
        ")\n",
        "\n",
        "# Convert country names to ISO3 codes\n",
        "\n",
        "Malaria_cases_long[\"country_code\"] = coco.convert(\n",
        "    Malaria_cases_long[\"country\"], to=\"ISO3\"\n",
        ")\n",
        "\n",
        "# Load the data on Malaria deaths reported\n",
        "\n",
        "Malaria_deaths = pd.read_csv(\"data\\malaria_number_of_deaths_reported.csv\")\n",
        "\n",
        "Malaria_deaths = Malaria_deaths[[\"country\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\"]]\n",
        "\n",
        "Malaria_deaths_long = Malaria_deaths.melt(\n",
        "    id_vars=[\"country\"], var_name=\"year\", value_name=\"Reported_deaths\"\n",
        ")\n",
        "\n",
        "# Convert country names to ISO3 codes\n",
        "\n",
        "Malaria_deaths_long[\"country_code\"] = coco.convert(\n",
        "    Malaria_deaths_long[\"country\"], to=\"ISO3\"\n",
        ")\n",
        "\n",
        "# Merge the two datasets i.e Malaria reported cases and Malaria reported deaths\n",
        "\n",
        "Malaria_cases_deaths = pd.merge(\n",
        "    Malaria_cases_long,\n",
        "    Malaria_deaths_long,\n",
        "    on=[\"country\", \"country_code\", \"year\"],\n",
        "    how=\"left\",\n",
        ")\n",
        "\n",
        "\n",
        "Malaria_data = pd.merge(\n",
        "    Malaria_cases_deaths,\n",
        "    Under5_pop_long,\n",
        "    on=[\"country\", \"country_code\", \"year\"],\n",
        "    how=\"left\",\n",
        ")\n",
        "\n",
        "# Rearrange the variables\n",
        "\n",
        "Malaria_data = Malaria_data[\n",
        "    [\n",
        "        \"country\",\n",
        "        \"country_code\",\n",
        "        \"year\",\n",
        "        \"Reported_cases\",\n",
        "        \"Reported_deaths\",\n",
        "        \"Total_Pop\",\n",
        "    ]\n",
        "]"
      ],
      "id": "28f7e535",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# the Reported cases data contains symbols like \"K\" and \"M\"\n",
        "\n",
        "\n",
        "def Reported_cases(value):\n",
        "    if pd.isna(value):  # Check for NaN values\n",
        "        return None\n",
        "    value = str(value).strip()  # Convert to string and remove any extra whitespace\n",
        "    if value[-1].upper() == \"K\":  # Check if it ends with 'K'\n",
        "        return float(value[:-1]) * 1000  # Remove 'K' and multiply by 1,000\n",
        "    elif value[-1].upper() == \"M\":  # Check if it ends with 'M'\n",
        "        return float(value[:-1]) * 1000000  # Remove 'M' and multiply by 1,000,000\n",
        "    else:\n",
        "        try:\n",
        "            return float(value)  # Return as a float if no suffix\n",
        "        except ValueError:\n",
        "            return None  # If conversion fails, return None\n",
        "\n",
        "\n",
        "# Apply the function to the column\n",
        "\n",
        "Malaria_data[\"Reported_cases\"] = Malaria_data[\"Reported_cases\"].apply(Reported_cases)\n",
        "\n",
        "# the Reported death  data contains symbols like \"K\" and \"M\"\n",
        "\n",
        "\n",
        "def Reported_deaths(value):\n",
        "    if pd.isna(value):  # Check for NaN values\n",
        "        return None\n",
        "    value = str(value).strip()  # Convert to string and remove any extra whitespace\n",
        "    if value[-1].upper() == \"K\":  # Check if it ends with 'K'\n",
        "        return float(value[:-1]) * 1000  # Remove 'K' and multiply by 1,000\n",
        "    elif value[-1].upper() == \"M\":  # Check if it ends with 'M'\n",
        "        return float(value[:-1]) * 1000000  # Remove 'M' and multiply by 1,000,000\n",
        "    else:\n",
        "        try:\n",
        "            return float(value)  # Return as a float if no suffix\n",
        "        except ValueError:\n",
        "            return None  # If conversion fails, return None\n",
        "\n",
        "\n",
        "# Apply the function to the column\n",
        "Malaria_data[\"Reported_deaths\"] = Malaria_data[\"Reported_deaths\"].apply(Reported_deaths)\n",
        "\n",
        "\n",
        "def Total_Pop(value):\n",
        "    if pd.isna(value):  # Check for NaN values\n",
        "        return None\n",
        "    value = str(value).strip()  # Convert to string and remove any extra whitespace\n",
        "    if value[-1].upper() == \"K\":  # Check if it ends with 'K'\n",
        "        return float(value[:-1]) * 1000  # Remove 'K' and multiply by 1,000\n",
        "    elif value[-1].upper() == \"M\":  # Check if it ends with 'M'\n",
        "        return float(value[:-1]) * 1000000  # Remove 'M' and multiply by 1,000,000\n",
        "    else:\n",
        "        try:\n",
        "            return float(value)  # Return as a float if no suffix\n",
        "        except ValueError:\n",
        "            return None  # If conversion fails, return None\n",
        "\n",
        "\n",
        "# Apply the function to the column\n",
        "Malaria_data[\"Total_Pop\"] = Malaria_data[\"Total_Pop\"].apply(Reported_deaths)\n",
        "\n",
        "\n",
        "# Calculate Malaria prevalence rate and Mortality rate for the period of 2002 to 2006 among Under five children\n",
        "\n",
        "Malaria_data[\"Prevalence_rate\"] = (\n",
        "    (Malaria_data[\"Reported_cases\"] / Malaria_data[\"Total_Pop\"]) * 100000\n",
        ").round(0)\n",
        "\n",
        "Malaria_data[\"Mortality_rate\"] = (\n",
        "    (Malaria_data[\"Reported_deaths\"] / Malaria_data[\"Total_Pop\"]) * 100000\n",
        ").round(0)\n",
        "\n",
        "\n",
        "Malaria_data[\"region\"] = coco.convert(Malaria_data[\"country\"], to=\"continent\")\n",
        "\n",
        "Malaria_data[\"year\"] = pd.to_numeric(Malaria_data[\"year\"])\n",
        "\n",
        "Malaria_data_2006 = Malaria_data.query(\"year== 2006\").sort_values(\n",
        "    \"Prevalence_rate\", ascending=False\n",
        ")\n",
        "\n",
        "# Remove rows where Prevalence_rate is NaN\n",
        "\n",
        "Malaria_data_2006 = Malaria_data_2006.dropna(subset=[\"Prevalence_rate\"])\n",
        "Malaria_data_2006 = Malaria_data_2006.dropna(subset=[\"Mortality_rate\"])\n",
        "\n",
        "# Compute highest Malaria Prevalence rate\n",
        "\n",
        "highest_row = (\n",
        "    Malaria_data_2006.sort_values(\"Prevalence_rate\", ascending=False).head(1).squeeze()\n",
        ")\n",
        "highest_malaria_prev_country = highest_row[\"country\"]\n",
        "highest_malaria_prev_value = round(highest_row[\"Prevalence_rate\"], 1)\n",
        "\n",
        "# Compute lowest Malaria Prevalence rate\n",
        "\n",
        "lowest_row = (\n",
        "    Malaria_data_2006.sort_values(\"Prevalence_rate\", ascending=True).head(1).squeeze()\n",
        ")\n",
        "lowest_malaria_prev_country = lowest_row[\"country\"]\n",
        "lowest_malaria_prev_value = round(lowest_row[\"Prevalence_rate\"], 1)\n",
        "\n",
        "# Create the map using plotly express with a blue color scale\n",
        "\n",
        "map_fig = px.choropleth(\n",
        "    Malaria_data_2006,\n",
        "    locations=\"country_code\",\n",
        "    color=\"Prevalence_rate\",\n",
        "    hover_name=\"country\",\n",
        "    title=\"Map of Countries by Prevalence rates among under 5 children\",\n",
        "    color_continuous_scale=\"Blues\",\n",
        ").update_layout(coloraxis_showscale=False)\n",
        "\n",
        "# Largest 20 countries by Life Expectancy (bar chart) with a blue color scale\n",
        "top_20 = Malaria_data_2006.nlargest(20, \"Total_Pop\").sort_values(\n",
        "    \"Prevalence_rate\", ascending=True\n",
        ")\n",
        "bar_fig = px.bar(\n",
        "    top_20,\n",
        "    x=\"Prevalence_rate\",\n",
        "    y=\"country\",\n",
        "    title=\"Prevalence rates in 20 Largest Countries\",\n",
        "    color=\"Prevalence_rate\",\n",
        "    color_continuous_scale=\"Blues\",\n",
        ").update_layout(coloraxis_showscale=False)"
      ],
      "id": "6e62051f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# MALARIA PREVALENCE RATE\n",
        "\n",
        "## Row 1 {height=30%}\n",
        "\n",
        "::: {.valuebox icon=\"heart-pulse\" color=\"#1E90FF\" title=\"Highest Malaria Prevalence Rate\"}\n",
        "\n",
        "`{python} str(highest_malaria_prev_value)`\n",
        "\n",
        "`{python} highest_malaria_prev_country`\n",
        "\n",
        ":::\n",
        "\n",
        "::: {.valuebox icon=\"thermometer\" color=\"#87CEFA\" title=\"Lowest Malaria Prevalence Rate\"} \n",
        "\n",
        "`{python} str(lowest_malaria_prev_value)`\n",
        "\n",
        "`{python} lowest_malaria_prev_country`\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "## Row 2 {height=60%}\n",
        "\n",
        "### {width=70%}\n"
      ],
      "id": "9be4e9c1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "map_fig"
      ],
      "id": "26e4d60b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### {width=40%}\n"
      ],
      "id": "44d419d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "bar_fig"
      ],
      "id": "5dffe723",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Largest 20 countries by Life Expectancy (bar chart) with a blue color scale\n",
        "top_20 = Malaria_data_2006.nlargest(20, \"Total_Pop\").sort_values(\"Prevalence_rate\", ascending=True)\n",
        "bar_fig = px.bar(\n",
        "    top_20,\n",
        "    x=\"Prevalence_rate\",\n",
        "    y=\"country\",\n",
        "    title=\"Prevalence rates in 20 Largest Countries\",\n",
        "    color=\"Prevalence_rate\",\n",
        "    color_continuous_scale=\"Blues\",\n",
        ").update_layout(coloraxis_showscale=False)"
      ],
      "id": "fa31e7d3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# MALARIA MORTALITY RATE\n",
        "\n",
        "## Row 1 {height=30%}\n"
      ],
      "id": "de237ece"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create regional summary\n",
        "reg_sum = (\n",
        "    Malaria_data_2006.groupby(\"region\")\n",
        "    .apply(\n",
        "        lambda g: pd.Series(\n",
        "            {\n",
        "                \n",
        "                \"Lowest Mortality Rate\": g[\"Mortality_rate\"].min(),\n",
        "                \"Country with Lowest Mortality Rate\": g.loc[g[\"Mortality_rate\"].idxmin(), \"country\"],\n",
        "                \"Highest  Mortality Rate\": g[\"Mortality_rate\"].max(),\n",
        "                \"Country with Highest Mortality Rate\": g.loc[\n",
        "                    g[\"Mortality_rate\"].idxmax(), \"country\"\n",
        "                ],\n",
        "            }\n",
        "        )\n",
        "    )\n",
        "    .round(2)\n",
        ")\n",
        "\n",
        "itables.show(reg_sum)"
      ],
      "id": "3fc5e34b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Row 2 {height=70%}\n",
        "\n",
        "### Column {width=\"80%\"}\n"
      ],
      "id": "45f97939"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Malaria_data_2006_sorted = Malaria_data_2006.sort_values(by=\"Mortality_rate\", ascending=False)\n",
        "\n",
        "# Create the bar chart\n",
        "continent_fig = px.histogram(\n",
        "    Malaria_data_2006_sorted,\n",
        "    y=\"region\",\n",
        "    x=\"Mortality_rate\",\n",
        "        title=\"Malaria Mortality Rate among under Five Population by Region \",\n",
        "        text_auto=True\n",
        "\n",
        ").update_layout(\n",
        "    showlegend=False,  # Remove legend\n",
        "    xaxis_title= \"Mortality Rate (per 100000 population)\",  # Fix x-axis title\n",
        "    yaxis_title=\"Regions\"  # Fix y-axis title\n",
        ")\n",
        "\n",
        "# Show the figure\n",
        "continent_fig.show()"
      ],
      "id": "50cc2c55",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Column {width=\"20%\"}\n",
        "\n",
        "Malaria mortality rates among children under five highlight stark disparities between continents. Africa reports an alarmingly high rate of 4,513 deaths per 100,000, underscoring significant health challenges faced by this vulnerable population. In contrast, Oceania, Asia, and the Americas show much lower ratesâ€”106, 79, and 36 deaths per 100,000 respectivelyâ€”indicating notable progress in health and environmental conditions in these regions.\n",
        "\n",
        "\n",
        "# RELATIONSHIP\n",
        "\n",
        "## Row 1 {height=30%}\n"
      ],
      "id": "b8781f8d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Malaria_data_all = Malaria_data.dropna(subset=[\"Prevalence_rate\"])\n",
        "\n",
        "Malaria_data_all = Malaria_data.dropna(subset=[\"Mortality_rate\"])\n",
        "\n",
        "fig = px.scatter(\n",
        "    Malaria_data_all, \n",
        "    x=\"Prevalence_rate\", \n",
        "    y=\"Mortality_rate\", \n",
        "    size=\"Total_Pop\",  # Bubble size (e.g., population)\n",
        "    color=\"region\",  # Color by region\n",
        "    title=\"Prevalence Rate vs Mortality Rate (Animated Bubble Chart)\",\n",
        "    hover_data=[\"country\"],  # Add hover info\n",
        "    animation_frame=\"year\",  # Animate over the \"Year\" column\n",
        "    animation_group=\"country\",  # Group bubbles by country\n",
        "    size_max=60  # Set a maximum bubble size for better visualization\n",
        ").update_layout(\n",
        "    showlegend=False,  # Remove legend\n",
        "    xaxis_title=\"Prevalence_rate(per 100000 Population)\",  # Fix x-axis title\n",
        "    yaxis_title=\"Mortality Rate (per 100000 population)\"  # Fix y-axis title\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "73cede61",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# DATA DOWNLOAD\n"
      ],
      "id": "74e51a87"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Display full dataset with itables\n",
        "itables.show(Malaria_data_all, caption=\"Gapminder Dataset (2002-2006)\", buttons=[\"csvHtml5\"])"
      ],
      "id": "ea38008d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# ABOUT\n",
        "\n",
        "This data comes from the python `plotly.express` libraryâ€™s `gapminder` dataset, which is originally sourced from the Gapminder Foundation.\n",
        "\n",
        "The Gapminder Foundation is a non-profit venture that promotes sustainable global development and achievement of the United Nations Millennium Development Goals by increasing use and understanding of statistics and other information about social, economic, and environmental development.\n"
      ],
      "id": "1a4fa90e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Daniel\\Documents\\GitHub\\Final_project_Malaria\\.venv\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}